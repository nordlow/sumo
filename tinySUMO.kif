(subclass BinaryRelation Relation)
(subclass BinaryPredicate Predicate)
(subclass Predicate Relation)
(subclass Relation Entity)
(subclass Physical Entity)
(subclass Class Entity)
(subclass SymbolicString Entity)
(subclass HumanLanguage Entity)
(subclass EnglishLanguage HumanLanguage)
(subclass VariableArityRelation Relation)
(subclass BinaryFunction Function)
(subclass UnaryFunction Function)
(subclass Function Relation)
(subclass TernaryRelation Relation)

(instance domain TernaryRelation)
(domain domain 1 Relation)
(domain domain 2 Integer)
(domain domain 3 Class)

(instance range BinaryRelation)
(domain range 1 Function)
(domain range 2 Class)

(instance domainSubclass TernaryRelation)
(domain domainSubclass 1 Relation)
(domain domainSubclass 2 Integer)
(domain domainSubclass 3 Class)

(instance subclass BinaryRelation)
(instance subclass TransitiveRelation)
(domain subclass 1 Entity)
(domain subclass 2 Entity)

(domain instance 1 Entity)
(domain instance 2 Entity)
(instance instance BinaryRelation)

(instance documentation TernaryRelation)
(domain documentation 1 Entity)
(domain documentation 2 HumanLanguage)
(domain documentation 3 SymbolicString)

(instance format TernaryRelation)
(domain format 2 Entity)
(domain format 1 HumanLanguage)
(domain format 3 SymbolicString)

(instance termFormat TernaryRelation)
(domain termFormat 2 Entity)
(domain termFormat 1 HumanLanguage)
(domain termFormat 3 SymbolicString)

(domain partition 1 Class)		
(domain partition 2 Class)		
(instance partition Predicate)		
(instance partition VariableArityRelation)

(documentation instance EnglishLanguage "A relation stating the
class membership of an individual.")
(format EnglishLanguage instance "%1 is an instance of %2")

(documentation subclass EnglishLanguage "A relation stating that
one class is more specific than another.")

(format EnglishLanguage subclass "%1 is a %2")
(termFormat EnglishLanguage instance "instance")
(termFormat EnglishLanguage subclass "subclass")

(=>
  (and
    (subclass ?B ?A)
    (subclass ?C ?B))
  (subclass ?C ?A))

(=>
  (and
    (subclass ?B ?A)
    (instance ?C ?B))
  (instance ?C ?A))

(subclass Human Physical)
(instance AbrahamLincoln Human)

(instance located BinaryRelation)
(instance located AntisymmetricRelation)
(domain located 1 Physical)
(domain located 2 Physical)

(subclass AntisymmetricRelation BinaryRelation)
(=>
    (instance ?REL AntisymmetricRelation)
    (forall (?INST1 ?INST2)
        (=>
            (and
                (?REL ?INST1 ?INST2)
                (?REL ?INST2 ?INST1))
            (equal ?INST1 ?INST2))))

;;-------------------------------------------------
;; Numbers and Arithmetic

;; Formula.MATH_FUNCTIONS

(domain AdditionFn 1 Quantity)
(domain AdditionFn 2 Quantity)
(instance AdditionFn BinaryFunction)
(range AdditionFn Quantity)

(domain SubtractionFn 1 Quantity)
(domain SubtractionFn 2 Quantity)
(instance SubtractionFn BinaryFunction)
(range SubtractionFn Quantity)

(domain MultiplicationFn 1 Quantity)
(domain MultiplicationFn 2 Quantity)
(instance MultiplicationFn BinaryFunction)
(range MultiplicationFn Quantity)

(domain DivisionFn 1 Quantity)
(domain DivisionFn 2 Quantity)
(instance DivisionFn BinaryFunction)
(range DivisionFn Quantity)

(domain FloorFn 1 ReadlNumber)
(instance FloorFn UnaryFunction)
(range FloorFn Integer)

(subclass Quantity Abstract)
(subclass Integer Quantity)

(domain MeasureFn 1 RealNumber)
(domain MeasureFn 2 UnitOfMeasure)
(instance MeasureFn BinaryFunction)
(range MeasureFn PhysicalQuantity)

(instance parents BinaryRelation)
(domain parents 1 Human)
(domain parents 2 Integer)
(=>
  (instance ?X Human)
  (parents ?X (AdditionFn 1 1)))

(parents AbrahamLincoln ?Y)

;;-------------------------------------------------
	
(instance minValue TernaryRelation)
(domain minValue 1 Relation)
(domain minValue 2 Integer)	
(domain minValue 3 Quantity)
	
;; need all Formula.COMPARISON_OPERATOR 

(domain greaterThanOrEqualTo 1 Quantity)
(domain greaterThanOrEqualTo 2 Quantity)
(instance greaterThanOrEqualTo BinaryPredicate)

(domain lessThan 1 Quantity)
(domain lessThan 2 Quantity)
(instance lessThan BinaryPredicate)

(domain lessThanOrEqualTo 1 Quantity)
(domain lessThanOrEqualTo 2 Quantity)
(instance lessThanOrEqualTo BinaryPredicate)

(domain greaterThanOrEqualTo 1 Quantity)
(domain greaterThanOrEqualTo 2 Quantity)
(instance greaterThanOrEqualTo BinaryPredicate)

(domain equal 1 Quantity)
(domain equal 2 Quantity)
(instance equal BinaryPredicate)

(domain greaterThan 1 Quantity)
(domain greaterThan 2 Quantity)
(instance greaterThan BinaryPredicate)

(domain ListOrderFn 1 List)		
(domain ListOrderFn 2 Integer)	; was PositiveInteger
(instance ListOrderFn BinaryFunction)		
; (instance ListOrderFn PartialValuedRelation)		
(range ListOrderFn Entity)

(domain ListFn 1 Entity)	
(instance ListFn Function)
(instance ListFn VariableArityRelation)	
(range ListFn List)

(=>
    (and
        (minValue ?R ?ARG ?N)
        (?R @ARGS)
        (equal ?VAL
            (ListOrderFn
                (ListFn @ARGS) ?ARG)))
    (greaterThan ?VAL ?N))



